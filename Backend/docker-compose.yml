version: "3"
networks:
  app-network: null
services:
  # The Web Server
  server:
    image: "nginx:stable-alpine"
    container_name: "server_${APP_NAME}"
    ports:
      - 80:80
    volumes:
      - ./server/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./app/:/var/www/html
    depends_on:
      - app
      - database
    networks:
      - app-network

  # The Database
  database:
    image: "mysql:5.7.22"
    container_name: "database_${APP_NAME}"
    restart: unless-stopped
    tty: true
    volumes:
      - ./database/dbdata:/var/lib/mysql
      - ./database/my.cnf:/etc/mysql/conf.d/my.cnf
    command:
      [
        "--character-set-server=utf8mb4",
        "--collation-server=utf8mb4_unicode_ci",
        "--default-authentication-plugin=mysql_native_password",
      ]
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - "3307:3306"
    networks:
      - app-network

  # The Application
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: "app_${APP_NAME}"
    working_dir: /var/www/html
    volumes:
      - ./app/:/var/www/html
    ports:
      - 9000:9000
    networks:
      - app-network

  # npm
  # npm:
  #   image: "node:13.7"
  #   container_name: "npm_${APP_NAME}"
  #   volumes:
  #     - ./app/:/var/www/html
  #   working_dir: /var/www/html
  #   entrypoint:
  #     - npm

  # Pub/sub Socket.io Server
  # pubsubserver:
  #   container_name: "pubsub_${APP_NAME}"
  #   build:
  #     context: ./pubsubserver
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   restart: unless-stopped

  redis:
    container_name: "redis_${APP_NAME}"
    image: redis:5-alpine
    ports:
      - 6379:6379
    volumes:
      - ./redis/data/redis:/data
    restart: unless-stopped
    networks:
      - app-network
